alias pumpIn d0
alias pumpOut d1
alias roomSensor d2
alias pipeBeforeOutAnalyzer d3
alias pipeInAnalyzer d4
alias pipeOutAnalyzer d5
alias stateDb db 

const NOMINAL = 1
const PRESSURIZING = 2
const VENTING = 3
const STOP = 4
const PAUSEIN = 5
const PAUSEOUT = 6

const MINPRESSURE = 95 # kPa
const ROOMVOLUME = 8000 * 2 * 4# liters

const NOMINALPRESSURE = 100
const MAXPRESSURE = 105
const MINPIPEPRESSURE = 100
const MAXPIPEPRESSURE = 40000
const R = 8.31448
const DESIREDFLOW = 5 # mol/tick

var pipeInTemp
var mols

var t1
var t2
j main
main:
    yield

    var state = stateDb.Setting
    if state == STOP
        pumpIn.On = 0
        pumpOut.On = 0
        sleep 1
        j main
    end
        var roomPressure = roomSensor.Setting
        # var roomPressure = roomSensor.Pressure

        if roomPressure > MAXPRESSURE
            Venting()
        end
        if roomPressure < MINPRESSURE
            Pressurizing()
        else
            Nominal()
        end
j main

function CalculateMolsNeeded
    t1 = roomPressure - NOMINALPRESSURE #t1 = pressure difference
    if t1 < 0
        t1 = t1 * -1
    end
    var roomTemp = pipeBeforeOutAnalyzer.Temperature
    mols = (t1 * ROOMVOLUME) / (R * roomTemp)
end

function CheckPipeInPressure
    var pipeInPressure = pipeInAnalyzer.Pressure
    if pipeInPressure < MINPIPEPRESSURE
        PauseIn()
    end
end

function CheckPipeOutPressure
    var pipeOutPressure = pipeOutAnalyzer.Pressure
    if pipeOutPressure > MAXPIPEPRESSURE
        PauseOut()
    end
end

function Venting
    CheckPipeOutPressure()
    stateDb.Setting = VENTING
    CalculateMolsNeeded()
    t1 = pipeBeforeOutAnalyzer.Pressure
    t2 = pipeBeforeOutAnalyzer.Temperature
    var pumpOutSpeed = (mols * R * t2) / t1
    pumpOut.Setting = pumpOutSpeed
    pumpOut.Mode = 0
    pumpOut.On = 1
    pumpIn.On = 0
    j main
end

function Pressurizing
    CheckPipeInPressure()
    stateDb.Setting = PRESSURIZING
    CalculateMolsNeeded()
    pipeInTemp = pipeInAnalyzer.Temperature
    var pumpInSpeed = (mols * R * pipeInTemp) / pipeInPressure
    pumpIn.Setting = pumpInSpeed
    pumpIn.On = 1
    pumpOut.On = 0
    j main
end

function Nominal
    CheckPipeInPressure()
    CheckPipeOutPressure()
    stateDb.Setting = NOMINAL
    pipeInTemp = pipeInAnalyzer.Temperature
    var pipeBeforeOutPressure = pipeBeforeOutAnalyzer.Pressure
    var pipeBeforeOutTemperature = pipeBeforeOutAnalyzer.Temperature
    #maxIntakeMoles
    t1 = (pipeInPressure * 100) / (R * pipeInTemp)

    #maxOutakeMoles
    t2 = (pipeBeforeOutPressure * 1000) / (R * pipeBeforeOutTemperature)
    
    #maxIntakeMoles > #maxOutakeMoles
    if t1 > t2
        t1 = t2
    end

    # t1 = t2

    if t1 > DESIREDFLOW
        t1 = DESIREDFLOW
    end

    #pumpSpeed1    #moles
    t2 =      (R * t1 * pipeInTemp) / pipeInPressure 
    pumpIn.Setting = t2
    
    #pumpSpeed2   #moles
    t2 =     (R * t1 * pipeBeforeOutTemperature) / pipeBeforeOutPressure 
    pumpOut.Setting = t2

    pumpIn.On = 1
    pumpOut.Mode = 0
    pumpOut.On = 1   

    j main
end

function PauseIn
    stateDb.Setting = PAUSEIN
    pumpIn.On = 0
    pumpOut.On = 0
    sleep 1
    j main
end

function PauseOut
    stateDb.Setting = PAUSEOUT
    pumpIn.On = 0
    pumpOut.On = 0
    sleep 1
    j main
end



